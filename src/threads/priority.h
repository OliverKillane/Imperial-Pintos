#ifndef THREADS_PRIORITY_H
#define THREADS_PRIORITY_H

#include <stdbool.h>
#include <stdint.h>
#include <list.h>
#include <priority_queue.h>
#include <fixed-point.h>

/* The library for calculating threads' priorities and choosing which one to
 * schedule accordingly
 *
 * The library is split into several parts: thread queue, donation system and
 * mlfqs priority calculation. The thread queue is responsible for deciding on
 * which thread should be scheduled next, based on the current priority of a
 * thread generated by the donation system or the mlfqs calculation. The
 * priority donation system works according to the part 3.3.4 of the spec
 * and keeps track of a graph of priority donation. There is a slight change to
 * it, and that is that locks do also have a priority that they donate to
 * the thread holding them. The mlfqs priority calculation system works exactly
 * as outlined in appendix B of the spec, with the averaging of the load average
 * and recent cpu carried out every second using mlfqs_decay() and the
 * incrementing of the recent cpu value carried out using mlqfs_tick().
 *
 * In terms of synchronization, since the thread queue is used directly in
 * the rescheduling, it has to be callable from an interrupt context, so
 * therefore cannot use synchronization primitives. However, everything else is
 * only called only in non-interrupt context, so can use primitives from sync.h
 * for synchronization. Particularly, the tree traversal in the donation system
 * uses hand-over-hand locking using semaphores (we cannot use the locks since
 * then they would have to be added to the donation system). The thread queue
 * should however disable interrupts on its own as well, in case it gets called
 * outside of interrupt context.
 */

/* Forward declaration of lock and thread */
struct lock;
struct thread;

/* Maximum depth to which the donation is updated */
#define DONATION_MAX_DEPTH 16
_Static_assert(DONATION_MAX_DEPTH, "DONATION_MAX_DEPTH must be positive");

/* Priority donation system */
void donation_thread_init(struct thread *thread, int8_t base_priority);
void donation_lock_init(struct lock *lock);
void donation_thread_destroy(struct thread *thread);

void donation_thread_block(struct thread *thread, struct lock *lock);
void donation_thread_unblock(struct thread *thread);

void donation_thread_acquire(struct thread *thread, struct lock *lock);
void donation_thread_release(struct lock *lock);

void donation_set_base_priority(struct thread *thread, int base_priority);
int donation_get_base_priority(const struct thread *thread);

#endif /* threads/priority.h */
